"""
–ú–æ–¥—É–ª—å –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±–æ—Ç–∞.
"""

import logging
import os
from aiogram import types, Bot
from aiogram.filters.command import Command
from aiogram.types import FSInputFile, CallbackQuery

from .texts import TEXTS, DOWNLOAD_URLS, ACCOUNT_URLS
from .keyboards import (
    get_os_keyboard,
    get_account_keyboard,
    get_program_install_keyboard,
    get_download_button,
    get_instruction_keyboard,
    get_final_keyboard,
    get_rating_keyboard
)
from .ratings import save_rating, get_stats, is_admin, ADMIN_CHAT_ID

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –û–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_os = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
user_step = {}

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
WELCOME_IMAGE_PATH = os.path.join(os.path.dirname(__file__), "..", "images", "help_bot.png")
NEW_USER_IMAGE_PATH = os.path.join(os.path.dirname(__file__), "..", "images", "NewUser.png")

# –≠—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
STEPS = {
    "ACCOUNT": 0,
    "CHROME": 1,
    "TELEGRAM": 2,
    "DONE": 3
}

async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    if user_id in user_os:
        del user_os[user_id]
    if user_id in user_step:
        del user_step[user_id]
        
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        image = FSInputFile(WELCOME_IMAGE_PATH)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        await message.answer_photo(
            photo=image,
            caption=TEXTS["welcome"],
            parse_mode="Markdown",
            reply_markup=get_os_keyboard()
        )
    except Exception as e:
        logging.error(f"Error sending welcome image: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            text=TEXTS["welcome"],
            parse_mode="Markdown",
            reply_markup=get_os_keyboard()
        )

async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    await cmd_start(message)

async def handle_os_choice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –û–°"""
    user_id = message.from_user.id
    logging.info(f"Processing OS choice: {message.text}")
    
    if message.text == "ü™ü Windows":
        user_os[user_id] = "windows"
        await message.answer(
            text=TEXTS["win_ok"],
            parse_mode="Markdown"
        )
    elif message.text == "üçé MacOS":
        user_os[user_id] = "mac"
        await message.answer(
            text=TEXTS["mac_ok"],
            parse_mode="Markdown"
        )
    
    try:
        image = FSInputFile(NEW_USER_IMAGE_PATH)
        await message.answer_photo(
            photo=image,
            caption=TEXTS["account_check"],
            parse_mode="Markdown",
            reply_markup=get_account_keyboard(user_os[user_id])
        )
        user_step[user_id] = STEPS["ACCOUNT"]
        logging.info(f"User {user_id} is at step: ACCOUNT")
    except Exception as e:
        logging.error(f"Error sending NewUser image: {str(e)}")
        await message.answer(
            text=TEXTS["account_check"],
            parse_mode="Markdown",
            reply_markup=get_account_keyboard(user_os[user_id])
        )

async def handle_program_info(message: types.Message, program: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    user_id = message.from_user.id
    if user_id not in user_os:
        await cmd_start(message)
        return

    os_type = user_os[user_id]
    info = TEXTS[f"{program}_install"]
    await message.answer(
        text=info,
        parse_mode="Markdown",
        reply_markup=get_program_install_keyboard(DOWNLOAD_URLS[program][os_type], os_type)
    )
    await message.answer(
        text=f" –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ  {program}:",
        reply_markup=get_download_button(DOWNLOAD_URLS[program][os_type])
    )

async def handle_program_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º"""
    program_map = {
        "Google Chrome": "chrome",
        "Telegram": "telegram"
    }

    if program := program_map.get(message.text):
        await handle_program_info(message, program)

async def handle_navigation(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    if message.text == TEXTS["back"]:
        await cmd_start(message)
    # elif message.text == TEXTS["restart"]:
        await cmd_start(message)
    elif message.text == TEXTS["support"]:
        await message.answer(
            text=TEXTS["support_text"],
            parse_mode="Markdown"
        )

async def handle_account_setup(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é"""
    user_id = message.from_user.id
    
    if user_id not in user_os:
        await cmd_start(message)
        return
        
    # if message.text == TEXTS["restart"]:
    #     await cmd_start(message)
    #     return
        
    if message.text == TEXTS["back"]:
        await cmd_start(message)
        return
        
    if message.text == TEXTS["account_ready"]:
        user_step[user_id] = STEPS["CHROME"]
        os_type = user_os[user_id]
        url = DOWNLOAD_URLS["chrome"][os_type]
        
        await message.answer(
            text=TEXTS["chrome_install"],
            parse_mode="Markdown",
            reply_markup=get_program_install_keyboard(url, os_type)
        )
        await message.answer(
            text="‚¨áÔ∏è     ‚¨áÔ∏è     ‚¨áÔ∏è",
            reply_markup=get_download_button(url)
        )
        return
        
    url = None
    if message.text == TEXTS["mac_account"]:
        url = ACCOUNT_URLS["mac"]
        logging.info(f"User {user_id} requested Mac OS account setup")
    elif message.text == TEXTS["win10_account"]:
        url = ACCOUNT_URLS["win10"]
    elif message.text == TEXTS["win11_account"]:
        url = ACCOUNT_URLS["win11"]
        
    if url:
        keyboard = get_instruction_keyboard(url)
        instruction_text = (
            "*üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏*\n\n"
            "‚ÑπÔ∏è –ú–æ—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.\n\n"
            "‚úÖ –ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ."
        )
        
        await message.answer(
            text=instruction_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )

async def handle_program_install(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º"""
    user_id = message.from_user.id
    logging.info(f"Handling program install message: {message.text}")
    
    if user_id not in user_os or user_id not in user_step:
        await cmd_start(message)
        return
        
    # if message.text == TEXTS["restart"]:
    #     logging.info("User clicked restart button")
    #     await cmd_start(message)
    #     return
        
    if message.text == TEXTS["back"]:
        logging.info("User clicked back button")
        current_step = user_step[user_id]
        os_type = user_os[user_id]
        logging.info(f"Current step: {current_step}, OS: {os_type}")
        
        if current_step == STEPS["CHROME"]:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
            try:
                image = FSInputFile(NEW_USER_IMAGE_PATH)
                await message.answer_photo(
                    photo=image,
                    caption=TEXTS["account_check"],
                    parse_mode="Markdown",
                    reply_markup=get_account_keyboard(user_os[user_id])
                )
                user_step[user_id] = STEPS["ACCOUNT"]
                logging.info("Returned to account setup")
            except Exception as e:
                logging.error(f"Error sending NewUser image: {str(e)}")
                await message.answer(
                    text=TEXTS["account_check"],
                    parse_mode="Markdown",
                    reply_markup=get_account_keyboard(user_os[user_id])
                )
                
        elif current_step == STEPS["TELEGRAM"]:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ Chrome
            url = DOWNLOAD_URLS["chrome"][os_type]
            user_step[user_id] = STEPS["CHROME"]
            logging.info("Returning to Chrome installation")
            await message.answer(
                text=TEXTS["chrome_install"],
                parse_mode="Markdown",
                reply_markup=get_program_install_keyboard(url, os_type)
            )
            await message.answer(
                text="‚¨áÔ∏è     ‚¨áÔ∏è     ‚¨áÔ∏è",
                reply_markup=get_download_button(url)
            )
        return
        
    if message.text == TEXTS["installed"]:
        current_step = user_step[user_id]
        os_type = user_os[user_id]
        
        if current_step == STEPS["CHROME"]:
            user_step[user_id] = STEPS["TELEGRAM"]
            url = DOWNLOAD_URLS["telegram"][os_type]
            await message.answer(
                text=TEXTS["telegram_install"],
                parse_mode="Markdown",
                reply_markup=get_program_install_keyboard(url, os_type)
            )
            await message.answer(
                text="‚¨áÔ∏è     ‚¨áÔ∏è     ‚¨áÔ∏è",
                reply_markup=get_download_button(url)
            )
            
        elif current_step == STEPS["TELEGRAM"]:
            user_step[user_id] = STEPS["DONE"]
            await message.answer(
                text=TEXTS["all_done"],
                parse_mode="Markdown",
                reply_markup=get_final_keyboard()
            )
            
    elif message.text == TEXTS["support"]:
        await message.answer(
            text=TEXTS["support_text"],
            parse_mode="Markdown"
        )
        
    elif message.text == TEXTS["request_code"]:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = message.from_user
            
        # –û—Ç—Ä–∏–º—É—î–º–æ username –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID —è–∫—â–æ username –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
        username = f"@{user.username}" if user.username else f"id{user.id}"
            
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admin_message = TEXTS["admin_message"].format(
            username=username
        )
        
        try:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
            bot = message.bot
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=admin_message
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞–ø–∏—Ç—É
            await message.answer(
                text=TEXTS["code_requested"],
                parse_mode="Markdown",
                reply_markup=get_rating_keyboard()
            )
            
        except Exception as e:
            logging.error(f"Error sending message to admin chat: {e}")
            await message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown"
            )

async def cmd_stats(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        await message.answer(TEXTS["admin_only"])
        return
        
    likes, dislikes = get_stats()
    await message.answer(
        TEXTS["stats_message"].format(
            likes=likes,
            dislikes=dislikes
        )
    )

async def handle_rating(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    username = f"@{callback.from_user.username}" if callback.from_user.username else f"id{user_id}"
    
    rating = "üëç" if callback.data == "rate_good" else "üëé"
    
    if save_rating(user_id, rating):
        await callback.message.edit_text(
            TEXTS["rating_thanks"],
            reply_markup=None
        )
    else:
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        bot = callback.bot
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=TEXTS["rating_error"].format(
                username=username,
                error="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤ —Ñ–∞–π–ª"
            )
        )
    
    await callback.answer() 